class CRUD {
    constructor(connection) {
        this.connection = connection;
    }

    inserir(table, data, callback) {
        const keys = Object.keys(data);
        const values = Object.values(data);
        const sql = `INSERT INTO ${table} (${keys.join(', ')}) VALUES (${keys.map(() => '?').join(', ')})`;
        this.connection.query(sql, values, (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }

    listar(table, callback) {
        const sql = `SELECT * FROM ${table}`;
        this.connection.query(sql, (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }

    pesquisarPorNome(table, column, nome, callback) {
        const sql = `SELECT * FROM ${table} WHERE ${column} LIKE ?`;
        this.connection.query(sql, [`%${nome}%`], (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }

    pesquisarPorId(table, id, callback) {
        const sql = `SELECT * FROM ${table} WHERE id = ?`;
        this.connection.query(sql, [id], (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }

    atualizar(table, id, data, callback) {
        const keys = Object.keys(data);
        const values = Object.values(data);
        const sql = `UPDATE ${table} SET ${keys.map(key => `${key} = ?`).join(', ')} WHERE id = ?`;
        this.connection.query(sql, [...values, id], (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }

    deletar(table, id, callback) {
        const sql = `DELETE FROM ${table} WHERE id = ?`;
        this.connection.query(sql, [id], (err, results) => {
            if (err) throw err;
            callback(results);
        });
    }
}

module.exports = CRUD;
